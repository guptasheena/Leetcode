917. Reverse Only Letters

Given a string S, return the "reversed" string where all characters that are not a letter stay in the same place, and all letters reverse their positions.

 

Example 1:

Input: "ab-cd"
Output: "dc-ba"
Example 2:

Input: "a-bC-dEf-ghIj"
Output: "j-Ih-gfE-dCba"
Example 3:

Input: "Test1ng-Leet=code-Q!"
Output: "Qedo1ct-eeLg=ntse-T!"
 

Note:

S.length <= 100
33 <= S[i].ASCIIcode <= 122 
S doesn't contain \ or "




Solution:
Time complexity: O(n)
Space complexity: O(n)


class Solution:
    def reverseOnlyLetters(self, S: str) -> str:
        
        if not S:
            return S
        
        s = list(S)
        i = 0
        j = len(s) - 1
        
        while(i<j):
            if s[i].isalpha() and s[j].isalpha():
                s[i], s[j] = s[j], s[i]
                i += 1
                j -= 1
            elif s[i].isalpha():
                j-= 1
            else:
                i += 1
        
        return "".join(s)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution:
    def reverseOnlyLetters(self, S: str) -> str:
        
        if not S:
            return S
        
        
        letters = []
        others = []
        for index, letter in enumerate(S):
            if letter.isalpha():
                letters.append(letter)
            else:
                others.append((index,letter))
                
        letters.reverse()
        
        for index, letter in others:
            letters.insert(index,letter)
        
        return "".join(letters)