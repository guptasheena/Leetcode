Given a non-empty array of integers, every element appears twice except for one. Find that single one.
Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
Example 1:
Input: [2,2,1]
Output: 1
Example 2:
Input: [4,1,2,1,2]
Output: 4



class Solution:
    def singleNumber(self, nums: List[int]) -> int:
         data = {}
         for index in range(0, len(nums)):
            first = nums[index]
            if first in data:
                del data[first]
            else:
                data[first] = index
                
         if (len(data) > 0):
            key, value = data.popitem()
            return key
