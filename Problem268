Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.
Example 1:
Input: [3,0,1]
Output: 2
Example 2:
Input: [9,6,4,2,3,5,7,0,1]
Output: 8




class Solution:
    def missingNumber(self, nums):

        nums.sort()

        if(nums[-1] != len(nums)):
            return len(nums)
        elif(nums[0] != 0):
            return 0

        for index in range(1, len(nums)):
            if (index != nums[index]):
                return index

obj = Solution()
print(obj.missingNumber([3, 0, 1]))






Using set:

class Solution:
    def missingNumber(self, nums):

        num_set = set(nums)  # a set sorts the list but cannot be indexed

        for index in range(0, len(nums)+1):
            if index not in num_set:
                return index

obj = Solution()
print(obj.missingNumber([3, 0, 1]))





Using Gauss Formula:

class Solution:
    def missingNumber(self, nums):

        actual_sum = sum(nums)
        length = len(nums)
        expected_sum = length * (length + 1) // 2

        return expected_sum - actual_sum

obj = Solution()
print(obj.missingNumber([3, 0, 1]))
