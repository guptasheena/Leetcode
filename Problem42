Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
 

Example:
Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6



Logic: The maximum level of water that each block can trap is the minimum of maximum height of bars on its both sides minus its own height.


Solution 1: Brute Force
Time complexity: O(n*n)
Space complexity: O(1)


class Solution:
    def trap(self, height):

        sum = 0

        for index in range(1, len(height) - 1):
            num = height[index]
            max_left = max(height[index:0:-1])
            max_right = max(height[index:len(height)])
            sum += min(max_left, max_right) - num

        return sum

obj = Solution()
nums = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
print(obj.trap(nums))





Solution2: Dynamic Programming
Time Complexity: O(n)
Space Complexity: O(n)


class Solution:
    def trap(self, height):

        if not height:
            return 0

        sum = 0
        left = [None]*len(height)
        right = [None]*len(height)

        left[0] = height[0]
        right[len(height) - 1] = height[len(height) - 1]

        for index in range(1, len(height)):
            left[index] = max(height[index], left[index-1])

        for index in range(len(height) - 2, 0, -1):
            right[index] = max(height[index], right[index+1])

        for index in range(1, len(height) - 1):
            sum += min(left[index], right[index]) - height[index]

        return sum

obj = Solution()
nums = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
print(obj.trap(nums))

